namespace qi = boost::spirit::qi;
 
template <typename Iterator>
struct keys_and_values
  : qi::grammar<istream_iterator, std::vector<std::vector<double>>>
{
    keys_and_values()
      : keys_and_values::base_type(query)
    {
        query =  (jibberish % '\n') >> nodecoorddata >> "EOF";
		jibberish = +qi::char_("a-zA-Z_0-9");
		nodecoorddata = "NODE_COORD_SECTION" >> '\n' >> nodecoords;
		nodecoords = (int_ >> double_ >> double_) % '\n';
    }
    qi::rule<Iterator, std::map<std::string, std::string>()> query;
    qi::rule<Iterator, std::pair<std::string, std::string>()> pair;
    qi::rule<Iterator, std::string()> key, value;
};



query =  (jibberish % '\n') >> nodecoorddata >> "EOF";
jibberish = +qi::char_("a-zA-Z_0-9");
nodecoorddata = "NODE_COORD_SECTION" >> '\n' >> nodecoords;
nodecoords = (int_ >> double_ >> double_) % '\n';